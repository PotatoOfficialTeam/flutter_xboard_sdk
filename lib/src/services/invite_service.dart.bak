import 'http_service.dart';
import '../models/invite_models.dart';
import '../exceptions/xboard_exceptions.dart';

/// 邀请码管理服务 - 基于hiddify真实API结构
class InviteService {
  final HttpService _httpService;

  InviteService(this._httpService);

  /// 生成邀请码
  Future<bool> generateInviteCode() async {
    try {
      await _httpService.getRequest('/api/v1/user/invite/save');
      return true;
    } catch (e) {
      throw ApiException('生成邀请码失败: ${e.toString()}');
    }
  }

  /// 获取邀请码数据
  Future<InviteCodeResponse> fetchInviteCodes() async {
    try {
      final response = await _httpService.getRequest('/api/v1/user/invite/fetch');
      return InviteCodeResponse.fromJson(response);
    } catch (e) {
      throw ApiException('获取邀请码数据失败: ${e.toString()}');
    }
  }

  /// 获取佣金详情列表
  Future<CommissionDetailResponse> fetchCommissionDetails({
    required int current,
    required int pageSize,
  }) async {
    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final uri = '/api/v1/user/invite/details?current=$current&page_size=$pageSize&t=$timestamp';
      
      final response = await _httpService.getRequest(uri);
      return CommissionDetailResponse.fromJson(response);
    } catch (e) {
      throw ApiException('获取佣金详情失败: ${e.toString()}');
    }
  }

  /// 生成邀请链接
  String generateInviteLink(String code, {String? baseUrl}) {
    final base = baseUrl ?? 'https://app.wujie.one'\;
    return '$base/?code=$code';
  }

  /// 获取邀请统计信息
  Future<Map<String, int>> getInviteStatistics() async {
    final response = await fetchInviteCodes();
    
    if (response.success && response.data != null) {
      final data = response.data!;
      return {
        'totalInvites': data.totalInvites,
        'validInvites': data.validInvites,
        'totalCommission': data.totalCommission,
        'totalCodes': data.codes.length,
        'activeCodes': data.codes.where((code) => code.isActive).length,
      };
    } else {
      throw ApiException('获取邀请统计失败：${response.message}');
    }
  }

  /// 获取我的邀请码列表
  Future<List<InviteCode>> getMyInviteCodes() async {
    final response = await fetchInviteCodes();
    
    if (response.success && response.data != null) {
      return response.data!.codes;
    } else {
      throw ApiException('获取邀请码列表失败：${response.message}');
    }
  }

  /// 获取佣金总收益（元）
  Future<double> getTotalCommissionInYuan() async {
    final response = await fetchInviteCodes();
    
    if (response.success && response.data != null) {
      return response.data!.totalCommission / 100.0;
    } else {
      throw ApiException('获取佣金总收益失败：${response.message}');
    }
  }

  /// 检查是否可以创建更多邀请码
  Future<bool> canCreateMoreInviteCodes() async {
    try {
      final codes = await getMyInviteCodes();
      final activeCodes = codes.where((code) => code.isActive).length;
      
      const maxActiveCodes = 10;
      return activeCodes < maxActiveCodes;
    } catch (e) {
      return false;
    }
  }
}
